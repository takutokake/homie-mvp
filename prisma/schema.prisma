// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(cuid())
  email              String   @unique
  username           String   @unique
  password_hash      String?  // null if Google-only
  google_id          String?  @unique
  
  // Profile Information
  display_name       String
  phone_number       String?
  profile_picture_url String?
  
  // Location & School
  school             String?  // USC or UCLA (required after profile completion)
  location_details   String?
  
  // Preferences
  price_range        String?  // $, $$, $$$, $$$$ (required after profile completion)
  meeting_preference String[] @default([])
  interests          String[] @default([])
  cuisine_preferences String[] @default([])
  
  // Profile Status
  profile_completed  Boolean @default(false)
  is_active          Boolean @default(true)
  sms_consent        Boolean @default(false)
  
  // Timestamps
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  last_login         DateTime?

  sessions Session[]
  createdMeetups Meetup[] @relation("MeetupCreator")
  meetupParticipations MeetupParticipant[]
  connectionsAsUser1 UserConnection[] @relation("User1Connections")
  connectionsAsUser2 UserConnection[] @relation("User2Connections")

  @@map("users")
}

model Invite {
  code       String    @id // 6-char, A–Z0–9 only
  createdBy  String    // admin id/email
  maxUses    Int       @default(1)
  usedCount  Int       @default(0)
  expiresAt  DateTime?
  isActive   Boolean   @default(true)
  
  // Enhanced invite features
  schoolRestriction String? // USC, UCLA, BOTH
  inviteType        String  @default("general") // general, premium, admin
  
  createdAt  DateTime  @default(now())

  @@map("invites")
}

model Session {
  id        String    @id @default(cuid())
  userId    String
  jwtId     String    @unique
  createdAt DateTime  @default(now())
  revokedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model UserConnection {
  id             String   @id @default(cuid())
  user1Id        String
  user2Id        String
  connectionType String   @default("match") // match, friend, blocked
  createdAt      DateTime @default(now())

  user1 User @relation("User1Connections", fields: [user1Id], references: [id], onDelete: Cascade)
  user2 User @relation("User2Connections", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
  @@map("user_connections")
}

model Meetup {
  id                  String   @id @default(cuid())
  createdBy           String
  title               String
  description         String?
  location            String
  priceRange          String   // $, $$, $$$, $$$$
  cuisineType         String?
  maxParticipants     Int      @default(4)
  currentParticipants Int      @default(1)
  scheduledFor        DateTime
  status              String   @default("open") // open, full, cancelled, completed
  createdAt           DateTime @default(now())

  creator      User                @relation("MeetupCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  participants MeetupParticipant[]

  @@map("meetups")
}

model MeetupParticipant {
  id       String   @id @default(cuid())
  meetupId String
  userId   String
  joinedAt DateTime @default(now())
  status   String   @default("confirmed") // confirmed, cancelled, no_show

  meetup Meetup @relation(fields: [meetupId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([meetupId, userId])
  @@map("meetup_participants")
}
